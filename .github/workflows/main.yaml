on: [ push, pull_request ]
jobs:

  tests:
    strategy:
      matrix:
        include:
          - tox_env: py36
            base_image: python:3.6
          - tox_env: py37
            base_image: python:3.7
          - tox_env: py38
            base_image: python:3.8
          - tox_env: py39
            base_image: python:3.9
          - tox_env: flake8
            base_image: python:3.6
    runs-on: ubuntu-latest
    container: "${{ matrix.base_image }}"
    steps:
      - uses: actions/checkout@v2
      - run: pip install tox
      - run: tox -e "${{ matrix.tox_env }}"

  build-executable-linux:
    needs: tests
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Build executable
        run: |
          sudo apt-get install -y libusb-1.0
          pip install tox
          tox -e pyinstaller
      - uses: actions/upload-artifact@v2
        with:
          name: linux-build
          path: pyinstaller_build/dist/*
          if-no-files-found: error
          retention-days: 1

  test-executable-linux:
    runs-on: ubuntu-latest
    needs: build-executable-linux
    strategy:
      matrix:
        base_image: [ "ubuntu:18.04", "ubuntu:20.04" ]
    env:
      LC_ALL: "C.UTF-8"
      LANG: "C.UTF-8"
    container: "${{ matrix.base_image }}"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: linux-build
          path: pyinstaller_build/dist
      - name: Install test dependencies
        run: |
          apt-get update
          apt-get install -y python3 python3-pytest
      - name: Run tests
        run: python3 test_build.py
        working-directory: pyinstaller_build

  build-executable-windows:
    needs: tests
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Build executable
        run: |
          pip install tox
          tox -e pyinstaller
      - uses: actions/upload-artifact@v2
        with:
          name: windows-build
          path: pyinstaller_build/dist/*
          if-no-files-found: error
          retention-days: 1

  test-executable-windows:
    needs: build-executable-windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - uses: actions/download-artifact@v2
        with:
          name: windows-build
          path: pyinstaller_build/dist
      - name: Install test dependencies
        run: |
          pip install pytest
      - name: Run tests
        run: python test_build.py
        working-directory: pyinstaller_build

  check_release_tag:
    runs-on: ubuntu-latest
    outputs:
      is_release_tag: "${{ steps.check_release_tag.outputs.is_release_tag }}"
    steps:
      - id: check_release_tag
        run: |
          if echo "$GITHUB_REF" | grep -q -E '^refs/tags/v[0-9]+\.[0-9]+\.[0-9]$'; then
              echo "::set-output name=is_release_tag::1"
          else
              echo "::set-output name=is_release_tag::0"
          fi

  release:
    needs: [ "test-executable-linux", "test-executable-windows", "check_release_tag" ]
    runs-on: ubuntu-latest
    if: needs.check_release_tag.outputs.is_release_tag == '1'
    env:
      BASE_ARTIFACT_NAME: vznncv-stlink-tools-wrapper
      RELEASE_ARTIFACTS_PATH: "${{ github.workspace }}/artifact_releases"
      RELEASE_NOTES_PATH: "${{ github.workspace }}/RELEASE_NOTES.md"
    steps:
      # download source code and artifacts
      - uses: actions/checkout@v2
        with:
          path: source
      - uses: actions/download-artifact@v2
        with:
          name: windows-build
          path: windows_build
      - uses: actions/download-artifact@v2
        with:
          name: linux-build
          path: linux_build
      # prepare release files
      - name: Extaract release notes
        id: extract-release-note
        uses: "ffurrer2/extract-release-notes@24e8a9a2bcc4bacc33aa54fd952da7d3a7f28db4" # v1.5.0
        with:
          changelog_file: source/CHANGELOG.md
          release_notes_file: "${{ env.RELEASE_NOTES_PATH }}"
      - name: Prepare release artifacts
        run: |
          mkdir "${RELEASE_ARTIFACTS_PATH}"
          (cd linux_build && chmod +x * && zip "${RELEASE_ARTIFACTS_PATH}/${BASE_ARTIFACT_NAME}-linux-x64.zip" *)
          (cd windows_build && chmod +x * && zip "${RELEASE_ARTIFACTS_PATH}/${BASE_ARTIFACT_NAME}-windows-x64.zip" *)
      # create release
      - name: Release
        uses: "softprops/action-gh-release@affa18ef97bc9db20076945705aba8c516139abd" # v1.*
        with:
          body_path: "${{ env.RELEASE_NOTES_PATH }}"
          files: |
            ${{ env.RELEASE_ARTIFACTS_PATH }}/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
